% Sep-15-2005: use real spherical harmonics instead of complex harmonics 
%------------------------------------------------------------------
% Generate require errors for pseudo-spectral method.
% Assume that we know all the eigenvalues lamda_ell of
%    the pseudo-differential operators
% The Fourier coefficients has been computed using real
% spherical harmonics.
% ideal solutions generated by testsphpde1.m
% -----------------------------------------------------------------
% Q.T. Le Gia, UNSW, Sydney, Australia.
% -----------------------------------------------------------------
clear all;
% load info on the ideal solution into variables
%   'ideal', 'ideal_noh', 'XR2', 'errmat'
load h2int0_ideal; 
format long;
Lsol = 64; 
l_range = (0:Lsol);
% 
tic
max_q=5;
% all the spherical harmonics at given points
Nr = 1000; % 1000 random points on a cap
if (size(XR2,2)<=3)
    XR2 = XR2';
end    
XR = XR2;
fh = realFhat(10,Lsol);
[theta,phi] = x2theta(XR);
sol_m = zeros(Lsol,Nr);
sol = zeros(max_q,Nr);
sol_m_noh = zeros(Lsol,Nr);
sol_noh = zeros(max_q,Nr);
sol00 = fh(1)/sqrt(4*pi);
for q=1:max_q
   hsol = hfunc2(q,(0:Lsol-1)./Lsol);
   % treat ell=0, m=0 separately
   % sol(q,1:Nr) = (fh(1)/sqrt(4*pi)/lambda(1))*ones(1,Nr);
   for ell=1:Lsol-1
      lower_r = ell*(ell+1)+1-ell;
      center_r = ell*(ell+1)+1;
      upper_r = ell*(ell+1)+1+ell;
      Pell = legendre(ell,XR(3,:),'sch');
      C = cos((1:ell)'*phi);
      S = sin((1:ell)'*phi);
      yy_C  = Pell(2:ell+1,:).*C(1:ell,:);        % m = 1:ell
      yy_0 = Pell(1,:);                           % m = 0
      yy_S = flipud(Pell(2:ell+1,:).*S(1:ell,:)); % m =-ell:-1
      Y = (sqrt(2*ell+1)/sqrt(4*pi)).* [yy_S;yy_0;yy_C];     
      sYell = fh(lower_r:upper_r)*Y(1:2*ell+1,:);
      sol_m(ell+1,:) = hsol(ell+1).*sYell;
      sol_m_noh(ell+1,:) = sYell;
      %sol_m(ell+1,:) = sYell;   
  end
  sol(q,1:Nr) = sum(sol_m); % sum over all ell
  sol_noh = sum(sol_m_noh);   
  % add the constant sol00 = u_{0,0}
  sol(q,:) = sol(q,:) + hsol(1)*sol00; 
  % add the constant sol00 = u_{0,0} to the solution
  sol_noh = sol_noh + sol00;
  ell
  toc
end
% now compute the errors
for q=1:max_q
    err(q) = max(abs(sol(q,:) ));
end 
err_noh = abs(sol_noh); 
display(err')
display(err_noh)
